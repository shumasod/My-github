# HTTP Method Not Allowed エラーの解説

## エラー内容
```
Route: api/user/segment
Error: Symfony\Component\HttpKernel\Exception\MethodNotAllowedHttpException
許可メソッド: PUT
使用メソッド: GET
```

## 原因と解決方法

### 1. エラーの発生理由
- ルートで許可されていないHTTPメソッドでアクセスを試みた
- このケースでは`GET`メソッドを使用したが、ルートは`PUT`のみ許可

### 2. 解決手順
- **APIクライアント(Postman等)の場合:**
  ```
  メソッドを GET → PUT に変更
  ```

- **フロントエンドコードの場合:**
  ```javascript
  // 誤った例
  fetch('/api/user/segment')
  
  // 正しい例
  fetch('/api/user/segment', {
    method: 'PUT',
    // ...他の設定
  })
  ```

- **Symfonyルート定義の修正例:**
  ```yaml
  # config/routes.yaml
  api_user_segment:
    path: /api/user/segment
    methods: [PUT]  # GETも許可する場合: [GET, PUT]
  ```

## デバッグのヒント

### 1. ルート情報の確認
```bash
# 現在のルート一覧を表示
php bin/console debug:router
```

### 2. ログ設定
```php
try {
    // リクエスト処理
} catch (MethodNotAllowedHttpException $e) {
    Log::error('Method Not Allowed', [
        'method' => $request->getMethod(),
        'path' => $request->getPathInfo(),
    ]);
}
```

## 学習ポイント
1. HTTPメソッドの役割と使い分け
   - GET: リソースの取得
   - PUT: リソースの更新
   - POST: リソースの作成
   - DELETE: リソースの削除

2. RESTful APIの設計原則
   - 適切なHTTPメソッドの選択
   - エラーハンドリングの重要性
   - 明確なAPIドキュメントの提供

3. セキュリティの観点
   - メソッド制限による不正アクセス防止
   - 適切なエラーメッセージの返却

## 補足
より詳しい情報は以下を参照:
- Symfonyドキュメント: ルーティング
- HTTPメソッドの仕様 (RFC 7231)
- RESTful API設計のベストプラクティス
